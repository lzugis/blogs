import{_ as l,o as e,c as s,a as t}from"./app.cb5ee193.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 了解css","slug":"_1-了解css","link":"#_1-了解css","children":[]},{"level":2,"title":"2. 规则集详解","slug":"_2-规则集详解","link":"#_2-规则集详解","children":[]},{"level":2,"title":"3. 选择器","slug":"_3-选择器","link":"#_3-选择器","children":[]},{"level":2,"title":"4. 盒子模型","slug":"_4-盒子模型","link":"#_4-盒子模型","children":[]},{"level":2,"title":"5. BFC","slug":"_5-bfc","link":"#_5-bfc","children":[{"level":3,"title":"5.1 定义","slug":"_5-1-定义","link":"#_5-1-定义","children":[]},{"level":3,"title":"5.2 触发条件","slug":"_5-2-触发条件","link":"#_5-2-触发条件","children":[]},{"level":3,"title":"5.3 特点","slug":"_5-3-特点","link":"#_5-3-特点","children":[]},{"level":3,"title":"5.4 有什么用","slug":"_5-4-有什么用","link":"#_5-4-有什么用","children":[]}]},{"level":2,"title":"6. 预处理器","slug":"_6-预处理器","link":"#_6-预处理器","children":[]}],"relativePath":"basic/web/css.md"}'),a={name:"basic/web/css.md"},i=t(`<div class="tip custom-block"><p class="custom-block-title">定义</p><p>层叠样式表（Cascading Style Sheet，简称：CSS）是为网页添加样式的代码。</p></div><h2 id="_1-了解css" tabindex="-1">1. 了解css <a class="header-anchor" href="#_1-了解css" aria-hidden="true">#</a></h2><p>和 HTML 类似，CSS 也不是真正的编程语言，甚至不是标记语言。它是一门样式表语言，这也就是说人们可以用它来选择性地为 HTML 元素添加样式。举例来说，要选择一个 HTML 页面里所有的段落元素，然后将其中的文本改成红色，可以这样写 CSS：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>不妨试一下：首先新建一个 styles 文件夹，在其中新建一个 style.css 文件，将这三行 CSS 保存在这个新文件中。</p><p>然后再将该 CSS 文件连接至 HTML 文档，否则 CSS 代码不会对 HTML 文档在浏览器里的显示效果有任何影响。</p><p>打开 index.html 文件，然后将下面一行粘贴到文档头（也就是 <code>&lt;head&gt;</code> 和 <code>&lt;/head&gt;</code> 标签之间）。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">styles/style.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-规则集详解" tabindex="-1">2. 规则集详解 <a class="header-anchor" href="#_2-规则集详解" aria-hidden="true">#</a></h2><p>让我们来仔细看一看上述 CSS： <img src="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png" alt="css-declaration-small" data-fancybox="gallery"> 整个结构称为 规则集（通常简称“规则”），各部分释义如下：</p><ul><li><p><strong>选择器（Selector）</strong> HTML 元素的名称位于规则集开始。它选择了一个或多个需要添加样式的元素（在这个例子中就是 p 元素）。要给不同元素添加样式只需要更改选择器就行了。</p></li><li><p><strong>声明（Declaration）</strong> 一个单独的规则，如 color: red; 用来指定添加样式元素的属性。</p></li><li><p><strong>属性（Properties）</strong> 改变 HTML 元素样式的途径。（本例中 color 就是 <code>&lt;p&gt;</code> 元素的属性。）CSS 中，由编写人员决定修改哪个属性以改变规则。</p></li><li><p><strong>属性的值（Property value）</strong> 在属性的右边，冒号后面即属性的值，它从指定属性的众多外观中选择一个值（我们除了 red 之外还有很多属性值可以用于 color ）。</p></li></ul><p>注意其他重要的语法：</p><ul><li>每个规则集（除了选择器的部分）都应该包含在成对的大括号里（{}）。</li><li>在每个声明里要用冒号（:）将属性与属性值分隔开。</li><li>在每个规则集里要用分号（;）将各个声明分隔开。</li></ul><h2 id="_3-选择器" tabindex="-1">3. 选择器 <a class="header-anchor" href="#_3-选择器" aria-hidden="true">#</a></h2><p>选择器有许多不同的类型。上面只介绍了元素选择器，用来选择 HTML 文档中给定的元素。但是选择操作可以更加具体。下面是一些常用的选择器类型：</p><table><thead><tr><th>选择器名称</th><th>选择的内容</th><th>示例</th></tr></thead><tbody><tr><td>元素选择器（也称作标签或类型选择器）</td><td>所有指定 (该) 类型的 HTML 元素</td><td>p 选择 <code>&lt;p&gt;</code></td></tr><tr><td>ID 选择器</td><td>具有特定 ID 的元素（单一 HTML 页面中，每个 ID 只对应一个元素，一个元素只对应一个 ID）</td><td>#my-id 选择 <code>&lt;p id=&quot;my-id&quot;&gt;</code> 或 <code>&lt;a id=&quot;my-id&quot;&gt;</code></td></tr><tr><td>类选择器</td><td>具有特定类的元素（单一页面中，一个类可以有多个实例）</td><td>.my-class 选择 <code>&lt;p class=&quot;my-class&quot;&gt;</code> 和 <code>&lt;a class=&quot;my-class&quot;&gt;</code></td></tr><tr><td>属性选择器</td><td>拥有特定属性的元素</td><td>img[src] 选择 <code>&lt;img src=&quot;myimage.png&quot;&gt;</code> 而不是 <code>&lt;img&gt;</code></td></tr><tr><td>伪（Pseudo）类选择器</td><td>特定状态下的特定元素（比如鼠标指针悬停）</td><td>a:hover 仅在鼠标指针悬停在链接上时选择 <code>&lt;a&gt;</code>。</td></tr></tbody></table><h2 id="_4-盒子模型" tabindex="-1">4. 盒子模型 <a class="header-anchor" href="#_4-盒子模型" aria-hidden="true">#</a></h2><p>编写 CSS 时你会发现，你的工作好像是围绕着一个一个盒子展开的——设置尺寸、颜色、位置，等等。页面里大部分 HTML 元素都可以被看作若干层叠的盒子。</p><p>并不意外，CSS 布局主要就是基于盒模型的。每个占据页面空间的块都有这样的属性：</p><ul><li><code>padding</code>：即内边距，围绕着内容（比如段落）的空间。</li><li><code>border</code>：即边框，紧接着内边距的线。</li><li><code>margin</code>：即外边距，围绕元素外部的空间。</li></ul><p><img src="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/box-model.png" alt="box-model" data-fancybox="gallery"></p><h2 id="_5-bfc" tabindex="-1">5. BFC <a class="header-anchor" href="#_5-bfc" aria-hidden="true">#</a></h2><h3 id="_5-1-定义" tabindex="-1">5.1 定义 <a class="header-anchor" href="#_5-1-定义" aria-hidden="true">#</a></h3><p>BFC（Block Formatting Context）块格式化上下文， 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><h3 id="_5-2-触发条件" tabindex="-1">5.2 触发条件 <a class="header-anchor" href="#_5-2-触发条件" aria-hidden="true">#</a></h3><ul><li>浮动元素（元素的float不是 none，指定float为left或者right就可以创建BFC）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>display:inline-block，display:table-cell，display:flex，display:inline-flex</li><li>overflow指定除了visible的值</li></ul><h3 id="_5-3-特点" tabindex="-1">5.3 特点 <a class="header-anchor" href="#_5-3-特点" aria-hidden="true">#</a></h3><ul><li>在BFC中，块级元素从顶端开始垂直地一个接一个的排列。（当然了，即便不在BFC里块级元素也会垂直排列）</li><li>如果两个块级元素属于同一个BFC，它们的上下margin会重叠（或者说折叠），以较大的为准。但是如果两个块级元素分别在不同的BFC中，它们的上下边距就不会重叠了，而是两者之和。</li><li>BFC的区域不会与浮动的元素区域重叠，也就是说不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，浮动元素也参与计算。BFC可以包含浮动元素。（利用这个特性可以清除浮动）</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li></ul><h3 id="_5-4-有什么用" tabindex="-1">5.4 有什么用 <a class="header-anchor" href="#_5-4-有什么用" aria-hidden="true">#</a></h3><ul><li>解决外边距折叠问题</li><li>制作两栏布局</li><li>清除元素内部的浮动</li></ul><h2 id="_6-预处理器" tabindex="-1">6. 预处理器 <a class="header-anchor" href="#_6-预处理器" aria-hidden="true">#</a></h2><ul><li>sass</li><li>less</li><li>stylus</li></ul>`,32),o=[i];function n(d,c,r,p,h,_){return e(),s("div",null,o)}const y=l(a,[["render",n]]);export{g as __pageData,y as default};
