import{_ as s,o as a,c as n,a as l}from"./app.cb5ee193.js";const o="/lzugis-blogs/img/basic/web/yuanxing.webp",p="/lzugis-blogs/img/basic/web/yuanxinglian.webp",h=JSON.parse('{"title":"5. es6","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 什么是js","slug":"_1-什么是js","link":"#_1-什么是js","children":[]},{"level":2,"title":"2. 快速入门","slug":"_2-快速入门","link":"#_2-快速入门","children":[{"level":3,"title":"2.1 变量","slug":"_2-1-变量","link":"#_2-1-变量","children":[]},{"level":3,"title":"2.2 数据类型","slug":"_2-2-数据类型","link":"#_2-2-数据类型","children":[]},{"level":3,"title":"2.3 运算符","slug":"_2-3-运算符","link":"#_2-3-运算符","children":[]},{"level":3,"title":"2.4 条件语句","slug":"_2-4-条件语句","link":"#_2-4-条件语句","children":[]},{"level":3,"title":"2.5 函数","slug":"_2-5-函数","link":"#_2-5-函数","children":[]},{"level":3,"title":"2.6 事件","slug":"_2-6-事件","link":"#_2-6-事件","children":[]}]},{"level":2,"title":"3. 事件循环","slug":"_3-事件循环","link":"#_3-事件循环","children":[{"level":3,"title":"3.1 定义","slug":"_3-1-定义","link":"#_3-1-定义","children":[]},{"level":3,"title":"3.2 微任务和宏任务","slug":"_3-2-微任务和宏任务","link":"#_3-2-微任务和宏任务","children":[]},{"level":3,"title":"3.3 执行过程","slug":"_3-3-执行过程","link":"#_3-3-执行过程","children":[]},{"level":3,"title":"3.4 整体流程","slug":"_3-4-整体流程","link":"#_3-4-整体流程","children":[]}]},{"level":2,"title":"4. 原型","slug":"_4-原型","link":"#_4-原型","children":[{"level":3,"title":"4.1 构造函数","slug":"_4-1-构造函数","link":"#_4-1-构造函数","children":[]},{"level":3,"title":"4.2 原型","slug":"_4-2-原型","link":"#_4-2-原型","children":[]},{"level":3,"title":"4.3 __proto__和constructor","slug":"_4-3-proto-和constructor","link":"#_4-3-proto-和constructor","children":[]},{"level":3,"title":"4.4 原型链","slug":"_4-4-原型链","link":"#_4-4-原型链","children":[]},{"level":3,"title":"5.1 概念","slug":"_5-1-概念","link":"#_5-1-概念","children":[]},{"level":3,"title":"5.2 新特性","slug":"_5-2-新特性","link":"#_5-2-新特性","children":[]}]}],"relativePath":"basic/web/js.md"}'),e={name:"basic/web/js.md"},t=l(`<div class="tip custom-block"><p class="custom-block-title">定义</p><p>JavaScript（缩写：JS）是一门完备的动态编程语言。当应用于 HTML 文档时，可为网站提供动态交互特性。由布兰登·艾克（Brendan Eich，Mozilla 项目、Mozilla 基金会和 Mozilla 公司的联合创始人）发明。</p></div><h2 id="_1-什么是js" tabindex="-1">1. 什么是js <a class="header-anchor" href="#_1-什么是js" aria-hidden="true">#</a></h2><p>JavaScript 的应用场合极其广泛，简单到幻灯片、照片库、浮动布局和响应按钮点击，复杂到游戏、2D/3D 动画、大型数据库驱动程序等等。</p><p>JavaScript 相当简洁，却非常灵活。开发者们基于 JavaScript 核心编写了大量实用工具，可以使 开发工作事半功倍。其中包括：</p><ul><li>浏览器应用程序接口（API）—— 浏览器内置的 API 提供了丰富的功能，比如：动态创建 HTML 和设置 CSS 样式、从用户的摄像头采集处理视频流、生成 3D 图像与音频样本等等。</li><li>第三方 API —— 让开发者可以在自己的站点中整合其它内容提供者（Twitter、Facebook 等）提供的功能。</li><li>第三方框架和库 —— 用来快速构建网站和应用。</li></ul><h2 id="_2-快速入门" tabindex="-1">2. 快速入门 <a class="header-anchor" href="#_2-快速入门" aria-hidden="true">#</a></h2><h3 id="_2-1-变量" tabindex="-1">2.1 变量 <a class="header-anchor" href="#_2-1-变量" aria-hidden="true">#</a></h3><p>变量 (en-US) 是存储值的容器。要声明一个变量，先输入关键字 let 或 var，然后输入合适的名称：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myVariable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-数据类型" tabindex="-1">2.2 数据类型 <a class="header-anchor" href="#_2-2-数据类型" aria-hidden="true">#</a></h3><p>注意变量可以有不同的数据类型 ：</p><ul><li><strong>值类型(基本类型)</strong>：字符串（<code>String</code>）、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、空（<code>Null</code>）、未定义（<code>Undefined</code>）、<code>Symbol</code>。</li><li><strong>引用数据类型（对象类型）</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)，还有两个特殊的对象：正则（<code>RegExp</code>）和日期（<code>Date</code>）。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2013/08/Javascript-DataType.png" alt="数据类型" data-fancybox="gallery"></p><table><thead><tr><th>变量</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>String</td><td>字符串（一串文本）：字符串的值必须用引号（单双均可，必须成对）扩起来。</td><td>let myVariable = &#39;李雷&#39;;</td></tr><tr><td>Number</td><td>数字：无需引号。</td><td>let myVariable = 10;</td></tr><tr><td>Boolean</td><td>布尔值（真 / 假）： true/false 是 JS 里的特殊关键字，无需引号。</td><td>let myVariable = true;</td></tr><tr><td>Array</td><td>数组：用于在单一引用中存储多个值的结构。</td><td>let myVariable = [1, &#39;李雷&#39;, &#39;韩梅梅&#39;, 10];</td></tr><tr><td>Object</td><td>对象：JavaScript 里一切皆对象，一切皆可储存在变量里。这一点要牢记于心。</td><td>let myVariable = document.querySelector(&#39;h1&#39;);</td></tr></tbody></table><h3 id="_2-3-运算符" tabindex="-1">2.3 运算符 <a class="header-anchor" href="#_2-3-运算符" aria-hidden="true">#</a></h3><p>运算符 (en-US) 是一类数学符号，可以根据两个值（或变量）产生结果。以下表格中介绍了一些最简单的运算符，可以在浏览器控制台里尝试一下后面的示例。</p><table><thead><tr><th>运算符</th><th>解释</th><th>符号</th><th>示例</th></tr></thead><tbody><tr><td>加</td><td>将两个数字相加，或拼接两个字符串。</td><td>+</td><td>6 + 9; <br>&quot;Hello &quot; + &quot;world!&quot;;</td></tr><tr><td>减、乘、除</td><td>这些运算符操作与基础算术一致。只是乘法写作星号，除法写作斜杠。</td><td>-, *, /</td><td>9 - 3; <br>8 * 2;<br>9 / 3;</td></tr><tr><td>赋值运算符</td><td>为变量赋值（你之前已经见过这个符号了）</td><td>=</td><td>let myVariable = &#39;李雷&#39;;</td></tr><tr><td>等于</td><td>测试两个值是否相等，并返回一个 true/false （布尔）值。</td><td>===</td><td>let myVariable = 3; <br>myVariable === 4; // false</td></tr><tr><td>不等于</td><td>和等于运算符相反，测试两个值是否不相等，并返回一个 true/false （布尔）值。</td><td>!==</td><td>let myVariable = 3; <br>myVariable !== 3; // false</td></tr><tr><td>取非</td><td>返回逻辑相反的值，比如当前值为真，则返回 false。</td><td>!</td><td>let myVariable = 3;<br>!(myVariable === 3); // false</td></tr></tbody></table><h3 id="_2-4-条件语句" tabindex="-1">2.4 条件语句 <a class="header-anchor" href="#_2-4-条件语句" aria-hidden="true">#</a></h3><p>条件语句是一种代码结构，用来测试表达式的真假，并根据测试结果运行不同的代码。一个常用的条件语句是 <code>if ... else</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// if...else</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> (num </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">正数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">负数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">// switch...case</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> day </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDate</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">switch</span><span style="color:#A6ACCD;"> (day) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">周末</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">工作日</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-5-函数" tabindex="-1">2.5 函数 <a class="header-anchor" href="#_2-5-函数" aria-hidden="true">#</a></h3><p>函数用来封装可复用的功能。如果没有函数，一段特定的操作过程用几次就要重复写几次，而使用函数则只需写下函数名和一些简短的信息。</p><p><code>document.querySelector</code> 和 <code>alert</code> 是浏览器内置的函数。下面代码演示的是如何自定义函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">multiply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-6-事件" tabindex="-1">2.6 事件 <a class="header-anchor" href="#_2-6-事件" aria-hidden="true">#</a></h3><p>事件能为网页添加真实的交互能力。它可以捕捉浏览器操作并运行一些代码做为响应。最简单的事件是点击事件，鼠标的点击操作会触发该事件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> btn1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 只会触发最后定义的</span></span>
<span class="line"><span style="color:#A6ACCD;">    btn1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clicked me</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 添加多少个，会触发多少次</span></span>
<span class="line"><span style="color:#A6ACCD;">    btn1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clicked me</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-事件循环" tabindex="-1">3. 事件循环 <a class="header-anchor" href="#_3-事件循环" aria-hidden="true">#</a></h2><h3 id="_3-1-定义" tabindex="-1">3.1 定义 <a class="header-anchor" href="#_3-1-定义" aria-hidden="true">#</a></h3><p><code>Event Loop</code>即事件循环，是指浏览器或<code>Node</code>的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。</p><h3 id="_3-2-微任务和宏任务" tabindex="-1">3.2 微任务和宏任务 <a class="header-anchor" href="#_3-2-微任务和宏任务" aria-hidden="true">#</a></h3><p>在JavaScript中，任务被分为两种，一种宏任务（MacroTask）也叫Task，一种叫微任务（MicroTask）。</p><ul><li><strong>MacroTask</strong>（宏任务）setTimeout、setInterval、I/O、UI Rendering。</li><li><strong>MicroTask</strong>（微任务） Process.nextTick（Node独有）、Promise、Object.observe(废弃)、MutationObserver</li></ul><h3 id="_3-3-执行过程" tabindex="-1">3.3 执行过程 <a class="header-anchor" href="#_3-3-执行过程" aria-hidden="true">#</a></h3><ul><li>同步代码，调用栈执行后直接出栈</li><li>异步代码，放到Web API中，等待时机，等合适的时候放入回调队列（callbackQueue），等到调用栈空时eventLoop开始工作，轮询</li><li>微任务执行时机比宏任务要早</li></ul><h3 id="_3-4-整体流程" tabindex="-1">3.4 整体流程 <a class="header-anchor" href="#_3-4-整体流程" aria-hidden="true">#</a></h3><ol><li>先清空call stack中的同步代码</li><li>执行微任务队列中的微任务</li><li>尝试DOM渲染</li><li>触发Event Loop反复询问callbackQueue中是否有要执行的语句，有则放入call back继续执行 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97161f74e2e7494bad644e28e22bcf4e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="整体流程" data-fancybox="gallery"></li></ol><h2 id="_4-原型" tabindex="-1">4. 原型 <a class="header-anchor" href="#_4-原型" aria-hidden="true">#</a></h2><h3 id="_4-1-构造函数" tabindex="-1">4.1 构造函数 <a class="header-anchor" href="#_4-1-构造函数" aria-hidden="true">#</a></h3><p>构造函数模式的目的就是为了创建一个自定义类，并且创建这个类的实例。构造函数模式中拥有了类和实例的概念，并且实例和实例之间是相互独立的。</p><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是<strong>构造函数习惯上首字母大写</strong>。另外就是调用方式的不同，普通函数是直接调用，而构造函数需要<strong>使用new关键字来调用</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">gender</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">gender</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">gender</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is a </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> years old </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gender</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lzugis</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInfo</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-2-原型" tabindex="-1">4.2 原型 <a class="header-anchor" href="#_4-2-原型" aria-hidden="true">#</a></h3><p>在JavaScript中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个prototype属性，这个属性指向函数的原型对象，并且这个属性是一个对象数据类型的值。 <img src="`+o+`" alt="原型" data-fancybox="gallery"></p><h3 id="_4-3-proto-和constructor" tabindex="-1">4.3 __proto__和constructor <a class="header-anchor" href="#_4-3-proto-和constructor" aria-hidden="true">#</a></h3><p>每一个对象数据类型(普通的对象、实例、prototype......)也天生自带一个属性__proto__，属性值是当前实例所属类的原型(prototype)。原型对象中有一个属性constructor, 它指向函数对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#676E95;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">Person)</span><span style="color:#676E95;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(person) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-4-原型链" tabindex="-1">4.4 原型链 <a class="header-anchor" href="#_4-4-原型链" aria-hidden="true">#</a></h3><p>在JavaScript中万物都是对象，对象和对象之间也有关系，并不是孤立存在的。对象之间的继承关系，在JavaScript中是通过prototype对象指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链。</p><p>举例说明:person → Person → Object ，普通人继承人类，人类继承对象类</p><p>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。如果没有则去原型的原型中寻找,直到找到Object对象的原型，Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined。</p><p>我们可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性；使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true <img src="`+p+'" alt="原型链" data-fancybox="gallery"></p><h1 id="_5-es6" tabindex="-1">5. es6 <a class="header-anchor" href="#_5-es6" aria-hidden="true">#</a></h1><h3 id="_5-1-概念" tabindex="-1">5.1 概念 <a class="header-anchor" href="#_5-1-概念" aria-hidden="true">#</a></h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="_5-2-新特性" tabindex="-1">5.2 新特性 <a class="header-anchor" href="#_5-2-新特性" aria-hidden="true">#</a></h3><ul><li>变量声明：const和let</li><li>模板字符串</li><li>箭头函数</li><li>函数的参数默认值</li><li>Spread / Rest 操作符<code>...</code></li><li>对象和数组解构</li><li>for...of 和 for...in</li><li>ES6中的类</li></ul>',57),r=[t];function c(y,D,i,F,d,A){return a(),n("div",null,r)}const u=s(e,[["render",c]]);export{h as __pageData,u as default};
